Identifiers in Python

- Are case-sensitive.
- Can be composed of almost any combination of letters, numerals, and underscore characters.
- Cannot begin with a numeral.
- Cannot be any of python reserved words


The bool Class
It is used to manipulate boolean values
- only two instances of the class are expressed as literals i.e True or False.
- python allows the creation of a Boolean value from a nonboolean type using the syntax bool(x) for value x.
- Numbers evaluate to False if zero and True if non-zero.
- Sequences and other container types evaluate to False if empty and True if nonempty.


The int Class
The *int* class is designed to represent integer values with arbitrary magnitude.
- In cases where it is convenient to express an integral value using binary, octal or hex, it can be done by using a prefix of the number 0 and then a character to describe the base.
	* Example
	  - 0x7f = 127
	  - 0o52 = 52
	  - 0b1011 = 11
- the constructor, int() returns value 0 by default
- int() can be used to construct an integer based upon an existing value of another type.
- integers passed as strings will be converted to the corresponding integer but string arguments like ('Hello') will raise a ValueError.
- if conversion to another base is required, the destination base is passed as a second argument.


The Float Class
- It is the sole floating-point type in python. its precision is alike to the double in C++ and Java.
- One can also use scientific notation to represent floating point values. For example 6.022e23 represents the value 6.022 x10^23.
- The constructor, float() returns 0.0 and when given a parameter, it attempts to return the equivalent floating-point value. For example, float(2) returns 2.0.


The list class
- A list instance stores a sequence of objects (arbitrary objects including the None object)
- It is akin to an "array" in other languages.
- Lists are array-based sequences and are zero-indexed => a list of length n has elements from 0 to n-1 inclusive.
- Python uses the [] characters to delimit lists
- [] represents an empty list
- The constructor, list() returns an empty list by default and accepts any parameter of an iterable type (e.g. strings, list, tuples, sets, dictionaries)
- Lists are mutable (content can be changed)


The tuple class
- Provides an immutable version of a sequence.
- Python uses () characters to delimit a tuple.
- 


The string class
- Python does not have a separate class for characters; they are just a strings of length one.
- Designed to represent an immutable sequence of characters.
- They can be enclosed in single 'hello' or double quotes "hello"
- For sequences of characters including the quote character, the escape character, '\' (backslash).
	* For example, to represent the sequence of characters, C:\User\Python, one will use the string literal, 'C:\\User\\Python' in python.
	* For the sequence, Don't worry, one will use, "Don't worry".
- Python also supports using the ''' and """ to denote the beginning and end of multiline text.



The set class
- Represent a collection of elements without duplicates and without a specific order to those elements.
- Two important restrictions to note:
    * a set does not maintain the elements in a specific order.
        For example:
        The code

            names = {"Achah", "John", "Doe"}
            print(names[0])

        when run produces an error
            print(names[0])
                  ~~~~~^^^
        TypeError: 'set' object is not subscriptable

    * only instances of immutable types can be added to a set in Python.
        For example
        The code
            names = {"Achah", ["John", "Doe"]}

        Produces the error
            names = {"Achah", ["John", "Doe"]}
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
        TypeError: unhashable type: 'list'

The dict class
- used to represent a mapping from a set of distinct keys to associated values.
- dictionaries were introduced to python prior to sets, consequently, the literal form {}
produces an empty dictionary not set.
- a non-empty dictionary is expressed using a  comma-separated series of key:value pairs.
- For example:
    {"la": "French", "the": "English"}

- a dictionary can be created from an exiting mapping or a sequence of key:value pairs using the dict() constructor.


Operators in Python
logical operators
    - not: negation
    - and: conditional and
    - or: conditional or

 equality operators
    - is: same identity (when identifiers are aliases for the same object)
    - is not: different
    - == : equivalent
    - != : not equivalent

 arithmetic operators
    - addition ( + )
    - subtraction ( - )
    - multiplication ( * )
    - division: ( / )
    - integer division: ( // )
 sequence operators
    - s[j] : indicates element in s sequence at index j
    - s[start:stop] : slice sequence s including start and stop indicators
    - s+t : concatenation of s and t sequences
    - k*s : short for s + s + s + ... (k times)
    - val in s: Containment check
    - val not in s : non containment check

    NB: Python uses zero-indexing and supports negative indexing
    
Control flow
    - Colon " : " character is used to delimit the beginning of a block of code
      that acts as a body for a control structure.
      NB: if the body can be stated in a singe statement, then it can be places to the right of the colon
      otherwise, indentation is used to designate the extent of the block of code or any nested blocks within it

    Conditionals (if statements): execute a block of code based on the run-time evaluation of a boolean expression
        Structure:
            if first_condition:
                first_body
            elif second_condition:
                second_body
            else:
                third_body
        Only one of the bodies of code is executed based on which condition is satisfied
        Example: robot instruction
            if door_is_closed:
                open_door()
            advance()
        Noticing the indentation level of the last statement, implies that it will always be executed meaning the robot only moves through an open door.
        another example with nesting involved
            if door_is_closed:
                if door_is_locked:
                    unlock_door()
                open_door()
            advance()
    Loops
        while loops
            structure
                while condition: (boolean expression)
                    body (block of code)
            Example
                j = 0
                while j < len(data) and data[j] != 'X':
                    j += 1

        For loops
            can be used on any kind of iterable structure.
            Structure
                for element in iterable:
                    body        in body, we may refer to "element" as an identifier

                Example1: summing elements of a list
                    total = 0
                    for val in data:
                        total += val
                2: finding max element in list
                    biggest = data[0]
                    for val in data:
                        if val > biggest:
                            biggest = val
                3: finding position of max element ( iteration using indices instead of going through the elements themselves )
                    big_index = 0
                    for i in range(len(data)):
                        if data[i] > data[big_index]:
                            big_index = i

        Break and Continue statments
            - break is used to immediately terminate the immediately enclosing loop.
            break Example:
                found = False
                for item in data:
                    if item == target:
                        found = True
                        break       #causes immediate exit of the for loop
            - Continue is used to stop the current iteration but the subsequent iterations go as expected.

